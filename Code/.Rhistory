# # 绘制折线图
# ggplot(df_long, aes(x = y, y = Count, color = Age_Group)) +
#   geom_line() +
#   labs(title = "Trend of Age Groups over Years",
#        x = "Year",
#        y = "Count",
#        color = "Age Group") +
#   theme_minimal()
# 拟合 GAM 模型并预测
interpolated_data_list <- lapply(age.sex_groups, function(var) {
gam_models <- df_demo %>%
group_by(ca, ca_name) %>%
do(model = {
gam_formula <- as.formula(paste(var, "~ s(y, k=3)"))
gam(gam_formula, data = .)
})
# 创建要预测的年份序列
new_years <- data.frame(y = 2022:2024)
# 执行预测
predictions <- gam_models %>%
do({
preds <- predict(.$model, newdata = new_years, type = "response")
data.frame(y = new_years$y, ca = .$ca, ca_name = .$ca_name, response = preds)
}) %>%
rename(!!var := response)
return(predictions)
})
# 合并所有预测结果
interpolated_data <- Reduce(function(x, y) full_join(x, y, by = c("ca", "ca_name", "y")), interpolated_data_list)
# 合并预测结果到原始数据框
df_demo_imputed <- bind_rows(df_demo, interpolated_data) %>%
arrange(ca, ca_name, y)
# 如果有需要，将值四舍五入变成整数型数据
# 如果有小于0的值设置为0
df_demo_imputed <- df_demo_imputed %>%
mutate(across(Male.Infancy:Female.Late_adulthood, function(x) pmax(as.integer(x), 0)))
# 修改数据框，调整 ca 列
df_demo_imputed <- df_demo_imputed %>%
mutate(ca = if_else(ca_name == "Glasgow City", "S12000049", ca)) %>%
mutate(ca = if_else(ca_name == "North Lanarkshire", "S12000050", ca))
# mutate(ca = if_else(ca_name == "Fife", "S12000047", ca)) %>%
# mutate(ca = if_else(ca_name == "Perth and Kinross", "S12000024", ca))
# 打印查看结果
head(df_demo_imputed)
# missmap(df_demo_imputed)
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
data7 <- read.csv("Practice_list_sizes_by_local_authority_and_age.csv")
list.sizes_ca <- data7 %>%
select(ca_name, y, num.practices, list.size)
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
data6 <- read.csv("data6.csv")
# 提取Designation列为"All GPs"且Gender列为"All"的所有行数据
df_GPnum <- data6 %>%
filter(Designation == "All GPs" & Gender == "All") %>%
pivot_longer(
cols = starts_with("X"),
names_to = "Year",
values_to = "Count"
) %>%
# 去掉 "X" 前缀并将 Year 列转换为数值型
mutate(Year = as.numeric(gsub("X", "", Year))) %>%
# 按 Local.Authority 和 Year 排序
arrange(Year, Local.Authority) %>%
# 重新命名
rename(ca_name = Local.Authority, y = Year, GPs_Count = Count) %>%
# 删除 ca_name 为 "Scotland" 的行
filter(ca_name != "Scotland") %>%
select(ca_name, y, GPs_Count)
head(df_GPnum)
# missmap(df_GPnum)
# # 使用left_join合并数据框
# df_GPnum.ca <- df_GPnum %>%
#   left_join(df_hosp.ca[, -1], by = c("ca_name")) %>%
#   distinct() %>%
#   select(ca, ca_name, hb, hb_name, y, GPs_Count)
# head(df_GPnum.ca)
# missmap(df_GPnum.ca)
# 计算每个 ca_name 所有年份 Count 的平均值
df_avg_count <- df_GPnum %>%
group_by(ca_name) %>%
summarize(avg_count = mean(GPs_Count, na.rm = TRUE))
# 绘制箱型图
ggplot(df_avg_count, aes(y = avg_count)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Boxplot of avg_count", y = "avg_count")
# 记录相关统计数据
practice_list_size_summary <- summary(df_avg_count$avg_count)
print(practice_list_size_summary)
# 可视化 Count 列数据的分布
ggplot(df_avg_count, aes(x = avg_count)) +
geom_histogram(binwidth = 15, fill = "blue", color = "black", alpha = 0.7) +
labs(title = "Distribution of avg_count", x = "avg_count", y = "Frequency") +
scale_x_continuous(breaks = seq(0, max(df_avg_count$avg_count, na.rm = TRUE), by = 250000)) +
geom_vline(xintercept = 70, color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = 160, color = "red", linetype = "dashed", size = 1)
# geom_vline(xintercept = practice_list_size_summary[2], color = "red", linetype = "dashed", size = 1) +
# geom_vline(xintercept = practice_list_size_summary[5], color = "red", linetype = "dashed", size = 1)
# 计算 CDF
ggplot(df_avg_count, aes(x = avg_count)) +
stat_ecdf(geom = "step") +
labs(title = "CDF of avg_count", x = "avg_count", y = "CDF") +
scale_y_continuous(labels = scales::percent_format()) +
theme_minimal() +
geom_vline(xintercept = practice_list_size_summary[2], color = "red", linetype = "dashed", size = 1) +
geom_vline(xintercept = practice_list_size_summary[5], color = "red", linetype = "dashed", size = 1)
# 根据avg_count列的值创建新的 GPType 列
ca_classed <- df_avg_count %>%
mutate(CAType = case_when(
avg_count < 70 ~ "Small",
avg_count >= 70 & avg_count <= 160 ~ "Medium",
avg_count > 160 ~ "Large"
))
colnames(ca_classed) <- c("ca_name", "size", "size_type")
ca_classed <- ca_classed %>%
left_join(df_codes, by = c("ca_name"))
head(ca_classed)
# missmap(ca_classed)
# 绘制 GPType 列的频率分布直方图
ggplot(ca_classed, aes(x = size_type)) +
geom_bar(fill = "skyblue", color = "black", alpha = 0.7) +
labs(title = "Frequency Distribution of CA Size Type", x = "CA Size Type", y = "Frequency")
# 计算各类型的频数
catype_counts <- ca_classed %>%
group_by(size_type) %>%
summarise(count = n())
# 绘制 CAType 列的饼状图
ggplot(catype_counts, aes(x = "", y = count, fill = size_type)) +
geom_bar(stat = "identity", width = 1) +
coord_polar(theta = "y") +
labs(title = "Pie Chart of GP Size Type") +
theme_void() +
theme(legend.title = element_blank())
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
data1 <- read.csv("opendata_monthly_ae_when_202404.csv")
mae <- data1[, -c(1,3)]
# 简化+处理 数据&变量
# total是总数而不是每个时间段的均值
colnames(mae) <- c("month", "hb", "hosp_code", "type", "day", "we", "hour", "inout", "total")
mae$type[mae$type == "Emergency Department"] <- "AE" # "Emergency Department"更名"AE"
mae$type[mae$type != "AE"] <- "MIU" # "Minor Injury Unit or Other"更名"MIU"
mae <- mae %>%
filter(type != "MIU") %>%
left_join(df_hosp.ca, by = c("hosp_code", "hb")) %>%
left_join(ca_classed[, c("ca_name", "size", "size_type")], by = c("ca_name"))
uh <- unique(mae$hour)
mae$h <- mae$total * 0 - 1 # hour of day
for (i in 1:length(uh)) mae$h[mae$hour == uh[i]] <- i - 1
mae$m <- mae$month %% 100 # month of year
mae$y <- mae$month %/% 100 # year
ud <- unique(mae$day)
id <- c(5, 1, 6, 7, 4, 2, 3)
mae$dow <- mae$y
for (i in 1:7) mae$dow[mae$day == ud[i]] <- id[i] # day of week
mae$cm <- (mae$y - 2018) * 12 + mae$m # cumulative month
mae$ch <- (mae$dow - 1) * 24 + mae$h # cumulative hour of week
mae <- mae %>%
select(hosp_code, ca, ca_name, hb, hb_name, y, m, dow, cm, ch, total)
head(mae)
# missmap(mae)
mae_ca <- mae %>%
filter(y != 2024) %>%  # 删除 y 为 2024 的行
group_by(ca, ca_name, hb, hb_name, y, m, ch) %>%
summarize(
total = sum(total)
)
head(mae_ca)
# missing(mae_ca)
df_monthly_load <- mae_ca %>%
left_join(ca_classed, by = c("ca", "ca_name", "hb", "hb_name")) %>%
left_join(df_GPnum, by = c("ca_name", "y")) %>%
left_join(list.sizes_ca, by = c("ca_name", "y")) %>%
left_join(df_demo_imputed, by = c("ca", "ca_name", "y"))
head(df_monthly_load)
missmap(df_monthly_load)
# # 找出有缺失值的行
# rows_with_na <- df_monthly_load[rowSums(is.na(df_monthly_load)) > 0, ]
# # 打印这些行
# print(rows_with_na)
# 将 df_monthly_load 数据框输出为 CSV 文件
write.csv(df_monthly_load, "df_monthly_load.csv", row.names = FALSE)
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
data2 <- read.csv("Weekly_data_on_numbers_by_length_of_wait_20240609.csv")
# Weekly data by the length of wait
wlw <- data2[, -c(1, 3)]
colnames(wlw) <- c(
"date", "hb", "hosp_code", "depart",
"total.a", "lt4", "gt4", "pc.lt4", "gt8", "pc.gt8", "gt12", "pc.gt12"
)
# 使用left_join合并数据框
wlw <- wlw %>%
left_join(df_hosp.ca, by = c("hosp_code", "hb")) %>%
left_join(ca_classed[, c("ca_name", "size", "size_type")], by = c("ca_name"))
wlw$g4l8 <- wlw$gt4 - wlw$gt8
wlw$g8l12 <- wlw$gt8 - wlw$gt12
wlw$pc.gt4 <- wlw$gt4 / wlw$total.a * 100
wlw$pc.g4l8 <- wlw$g4l8 / wlw$total.a * 100
wlw$pc.g8l12 <- wlw$g8l12 / wlw$total.a * 100
wlw <- wlw %>%
mutate(
pc.gt4 = round(pc.gt4, 1),
pc.g4l8 = round(pc.g4l8, 1),
pc.g8l12 = round(pc.g8l12, 1)
)
wlw$d <- wlw$date %% 100 # day of month 提取最后两位为日
dm <- wlw$date %/% 100 # year month 整除100得到年+月
wlw$m <- dm %% 100 # month 进一步提取月份
wlw$y <- dm %/% 100 # year 进一步提取年份
wlw$date <- as.Date(as.character(wlw$date), "%Y%m%d") # 转化原来的日期格式
wlw$julian <- julian(wlw$date, origin = as.Date("2015-02-22")) # 计算日期离2015.02.22有多少天
# 假设你想要的新顺序是按列名
new_order <- c("date", "hb", "hb_name", "ca", "ca_name", "size", "size_type", "hosp_code", "depart", "total.a", "lt4", "gt4", "gt8", "gt12", "g4l8", "g8l12", "pc.lt4", "pc.gt4", "pc.gt8", "pc.gt12", "pc.g4l8", "pc.g8l12", "d", "m", "y", "julian")
# 重新排列列顺序
wlw <- wlw %>%
select(hosp_code, ca, ca_name, hb, hb_name, y, m, d, julian, total.a, lt4, gt4, pc.lt4, pc.gt4)
head(wlw)
# missmap(wlw)
# Create the wlw_ca dataframe
wlw_ca <- wlw %>%
group_by(ca, ca_name, hb, hb_name, y, m, julian) %>%
summarize(
total.a = sum(total.a),
lt4 = sum(lt4),
gt4 = sum(gt4)
)
wlw_ca <- wlw_ca %>%
filter(y != 2024) %>%  # 删除 y 为 2024 的行
mutate(
pc.lt4 = lt4 / total.a,
pc.gt4 = gt4 / total.a,
# overload = ifelse(pc.lt4 < 0.95, 0, 1),
# ca = as.factor(ca)
)
# Inspect the head of the updated dataframe
head(wlw_ca)
# missmap(wlw_ca)
df_waiting_time <- wlw_ca %>%
left_join(ca_classed, by = c("ca", "ca_name", "hb", "hb_name"))
# 使用 case_when 条件语句来更新数据框
wlw_ca <- wlw_ca %>%
mutate(
ca = case_when(
# 当满足以下条件时，将 ca 变量更新为 S12000015
ca == "S12000047" & ca_name == "Fife" & y %in% 2015:2017 ~ "S12000015",
# 当满足以下条件时，将 ca 变量更新为 S12000024
ca == "S12000048" & ca_name == "Perth and Kinross" & y %in% 2015:2017 ~ "S12000024",
# 其他情况保持不变
TRUE ~ ca
)
)
df_waiting_time <- wlw_ca %>%
left_join(df_GPnum, by = c("ca_name", "y")) %>%
left_join(list.sizes_ca, by = c("ca_name", "y")) %>%
left_join(df_demo_imputed, by = c("ca", "ca_name", "y"))
head(df_waiting_time)
missmap(df_waiting_time)
# # 找出有缺失值的行
# rows_with_na <- df_monthly_load[rowSums(is.na(df_waiting_time)) > 0, ]
# # 打印这些行
# print(rows_with_na)
# 将 df_waiting_time 数据框输出为 CSV 文件
write.csv(df_waiting_time, "df_waiting_time.csv", row.names = FALSE)
# 确保所有变量为数值类型（如果必要的话）
df_monthly_load <- df_monthly_load %>%
mutate(across(c(y, m, ch, GPs_Count, num.practices, list.size,
Male.Infancy, Male.Early_childhood, Male.Middle_childhood,
Male.Adolescence, Male.Early_adulthood, Male.Middle_adulthood,
Male.Late_adulthood, Female.Infancy, Female.Early_childhood,
Female.Middle_childhood, Female.Adolescence, Female.Early_adulthood,
Female.Middle_adulthood, Female.Late_adulthood), as.numeric))
# # 确保所有变量为数值类型（如果必要的话）
# df_monthly_load <- df_monthly_load %>%
#   mutate(across(c(y, m, ch, GPs_Count, num.practices, list.size,
#                   Male.Infancy, Male.Early_childhood, Male.Middle_childhood,
#                   Male.Adolescence, Male.Early_adulthood, Male.Middle_adulthood,
#                   Male.Late_adulthood, Female.Infancy, Female.Early_childhood,
#                   Female.Middle_childhood, Female.Adolescence, Female.Early_adulthood,
#                   Female.Middle_adulthood, Female.Late_adulthood), as.numeric))
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 拟合GAM模型，包括傅里叶项
gam_model <- gam(total ~ ca_name + y + m + ch + GPs_Count + num.practices + list.size +
Male.Infancy + Male.Early_childhood + Male.Middle_childhood +
Male.Adolescence + Male.Early_adulthood + Male.Middle_adulthood +
Male.Late_adulthood + Female.Infancy + Female.Early_childhood +
Female.Middle_childhood + Female.Adolescence + Female.Early_adulthood +
Female.Middle_adulthood + Female.Late_adulthood + sin_ch + cos_ch,
data = df_monthly_load)
# 打印模型摘要
summary(gam_model)
# 进行预测
df_monthly_load$predicted_total <- predict(gam_model, newdata = df_monthly_load)
# 可视化真实值和预测值
ggplot(df_monthly_load, aes(x = ch)) +
geom_line(aes(y = total, color = "True values")) +
geom_line(aes(y = predicted_total, color = "Predicted values")) +
facet_wrap(~ y + m) +
labs(title = "True vs Predicted Total Values",
x = "Hour of Month",
y = "Total Number of Attendances",
color = "Legend") +
theme_minimal()
predict(gam_model, newdata = df_monthly_load)
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 拟合GAM模型，包括傅里叶项
# gam_model <- gam(total ~ ca_name + y + m + ch + GPs_Count + num.practices + list.size +
#                    Male.Infancy + Male.Early_childhood + Male.Middle_childhood +
#                    Male.Adolescence + Male.Early_adulthood + Male.Middle_adulthood +
#                    Male.Late_adulthood + Female.Infancy + Female.Early_childhood +
#                    Female.Middle_childhood + Female.Adolescence + Female.Early_adulthood +
#                    Female.Middle_adulthood + Female.Late_adulthood + sin_ch + cos_ch,
#                  data = df_monthly_load)
gam_model <- gam(total ~ ca_name + ch + sin_ch + cos_ch, data = df_monthly_load)
# 打印模型摘要
summary(gam_model)
# 进行预测
df_monthly_load$predicted_total <- predict(gam_model, newdata = df_monthly_load)
# 可视化真实值和预测值
ggplot(df_monthly_load, aes(x = ch)) +
geom_line(aes(y = total, color = "True values")) +
geom_line(aes(y = predicted_total, color = "Predicted values")) +
facet_wrap(~ y + m) +
labs(title = "True vs Predicted Total Values",
x = "Hour of Month",
y = "Total Number of Attendances",
color = "Legend") +
theme_minimal()
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 初始化一个列表来存储模型和预测值
models <- list()
predictions <- data.frame()
# 根据 ca_name 进行分组，并拟合 GAM 模型
for (ca in unique(df_monthly_load$ca_name)) {
df_subset <- df_monthly_load %>% filter(ca_name == ca)
# 拟合 GAM 模型
gam_model <- gam(total ~ s(ch) + sin_ch + cos_ch, data = df_subset)
# 存储模型
models[[ca]] <- gam_model
# 进行预测
df_subset$predicted_total <- predict(gam_model, newdata = df_subset)
# 添加预测结果到总数据框
predictions <- rbind(predictions, df_subset)
}
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_loadcsv")
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_loadcsv")
library(dplyr)
library(tidyverse)
library(tidyr)
library(lubridate)
library(scales)
library(readr)
library(TSA)
library(mgcv)
library(ggplot2)
library(corrplot)
library(Amelia)
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_loadcsv")
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_load.csv")
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_load.csv")
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_load.csv")
library(dplyr)
library(tidyverse)
library(tidyr)
library(lubridate)
library(scales)
library(readr)
library(TSA)
library(mgcv)
library(ggplot2)
library(corrplot)
library(Amelia)
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code")
df_monthly_load <- read.csv("df_monthly_load.csv")
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code/Code")
df_monthly_load <- read.csv("df_monthly_load.csv")
df_waiting_time <- read.csv("df_waiting_time.csv")
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 初始化一个列表来存储模型和预测值
models <- list()
predictions <- data.frame()
# 根据 ca_name 进行分组，并拟合 GAM 模型
for (ca in unique(df_monthly_load$ca_name)) {
df_subset <- df_monthly_load %>% filter(ca_name == ca)
# 拟合 GAM 模型
gam_model <- gam(total ~ s(ch) + sin_ch + cos_ch, data = df_subset)
# 存储模型
models[[ca]] <- gam_model
# 进行预测
df_subset$predicted_total <- predict(gam_model, newdata = df_subset)
# 添加预测结果到总数据框
predictions <- rbind(predictions, df_subset)
}
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 初始化一个列表来存储模型和预测值
models <- list()
predictions <- data.frame()
# 根据 ca_name 进行分组，并拟合 GAM 模型
for (ca in unique(df_monthly_load$ca_name)) {
df_subset <- df_monthly_load %>% filter(ca_name == ca)
View(df_subset)
# 拟合 GAM 模型
gam_model <- gam(total ~ s(ch) + sin_ch + cos_ch, data = df_subset)
# 存储模型
models[[ca]] <- gam_model
# 进行预测
df_subset$predicted_total <- predict(gam_model, newdata = df_subset)
# 添加预测结果到总数据框
predictions <- rbind(predictions, df_subset)
}
View(df_monthly_load)
unique(df_monthly_load$ca_name)
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 初始化一个列表来存储模型和预测值
models <- list()
predictions <- data.frame()
# 根据 ca_name 进行分组，并拟合 GAM 模型
for (ca in unique(df_monthly_load$ca_name)) {
df_subset <- df_monthly_load %>% filter(ca_name == ca)
View(df_subset)
# 拟合 GAM 模型
gam_model <- gam(total ~ s(ch) + sin_ch + cos_ch, data = df_subset)
# 存储模型
models[[ca]] <- gam_model
# 进行预测
df_subset$predicted_total <- predict(gam_model, newdata = df_subset)
# 添加预测结果到总数据框
predictions <- rbind(predictions, df_subset)
}
df_subset <- df_monthly_load %>% filter(ca_name == "Aberdeen City")
df_subset
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 初始化一个列表来存储模型和预测值
models <- list()
predictions <- data.frame()
# 根据 ca_name 进行分组，并拟合 GAM 模型
for (ca in unique(df_monthly_load$ca_name)) {
print(ca)
df_subset <- df_monthly_load %>% filter(ca_name == ca)
View(df_subset)
# 拟合 GAM 模型
gam_model <- gam(total ~ s(ch) + sin_ch + cos_ch, data = df_subset)
# 存储模型
models[[ca]] <- gam_model
# 进行预测
df_subset$predicted_total <- predict(gam_model, newdata = df_subset)
# 添加预测结果到总数据框
predictions <- rbind(predictions, df_subset)
}
library(dplyr)
library(tidyverse)
library(tidyr)
library(lubridate)
library(scales)
library(readr)
library(TSA)
library(mgcv)
library(ggplot2)
library(corrplot)
library(Amelia)
setwd("/Users/l/Desktop/Edinburgh/Dissertation/Session1_PHS/Data_Code/Code")
df_monthly_load <- read.csv("df_monthly_load.csv")
df_waiting_time <- read.csv("df_waiting_time.csv")
# 创建傅里叶项来捕捉周期性
df_monthly_load <- df_monthly_load %>%
mutate(sin_ch = sin(2 * pi * ch / 24),
cos_ch = cos(2 * pi * ch / 24))
# 初始化一个列表来存储模型和预测值
models <- list()
predictions <- data.frame()
# 根据 ca_name 进行分组，并拟合 GAM 模型
for (ca in unique(df_monthly_load$ca_name)) {
print(ca)
df_subset <- df_monthly_load %>% filter(ca_name == ca)
View(df_subset)
# 拟合 GAM 模型
gam_model <- gam(total ~ s(ch) + sin_ch + cos_ch, data = df_subset)
# 存储模型
models[[ca]] <- gam_model
# 进行预测
df_subset$predicted_total <- predict(gam_model, newdata = df_subset)
# 添加预测结果到总数据框
predictions <- rbind(predictions, df_subset)
}
df_monthly_load %>% filter(ca_name == "Dumfries and Galloway")
df_subset <- df_monthly_load %>% filter(ca_name == "Dumfries and Galloway")
df_subset
View(df_subset)
